gp = gpar(fontface = 3, fontsize = 9),
hjust = 1,
x = 1
)
)
install.packages("gridExtra")
grid.arrange(
p3,
p3,
p3,
nrow = 1,
top = "Title of the page",
bottom = textGrob(
"this footnote is right-justified",
gp = gpar(fontface = 3, fontsize = 9),
hjust = 1,
x = 1
)
)
library(gridExtra)
grid.arrange(
p3,
p3,
p3,
nrow = 1,
top = "Title of the page",
bottom = textGrob(
"this footnote is right-justified",
gp = gpar(fontface = 3, fontsize = 9),
hjust = 1,
x = 1
)
)
df.ssimt = subset(df, Índice == "SSIMT")
df.euc = subset(df, Índice == "EUCLIDEA")
df.dtw = subset(df, Índice == "DTW")
df.chou = subset(df, Índice == "CHOUAKRIA")
p1 = ggplot(df.euc, aes(x=as.numeric(Nivel), y=as.numeric(Similitud), color=Índice))+
geom_point() +
stat_smooth(se = FALSE)
#theme(legend.position = 'none')
p2 = ggplot(df.dtw, aes(x=as.numeric(Nivel), y=as.numeric(Similitud), color=Índice))+
geom_point() +
stat_smooth(se = FALSE)
#theme(legend.position = 'none')
p3 = ggplot(df.chou, aes(x=as.numeric(Nivel), y=as.numeric(Similitud), color=Índice))+
geom_point() +
stat_smooth(se = FALSE)
#theme(legend.position = 'none')
p4 = ggplot(df.ssimt, aes(x=as.numeric(Nivel), y=as.numeric(Similitud), color=Índice))+
geom_point() +
stat_smooth(se = FALSE)
#theme(legend.position = 'none')
grid.arrange(
p1,
p2,
p3,
nrow = 1,
top = "Title of the page",
bottom = textGrob(
"this footnote is right-justified",
gp = gpar(fontface = 3, fontsize = 9),
hjust = 1,
x = 1
)
)
grid.arrange(
p1,
p2,
p3,
nrow = 1,
top = "Title of the page"
#bottom = textGrob(
# "this footnote is right-justified",
#gp = gpar(fontface = 3, fontsize = 9),
#hjust = 1,
#x = 1
)
)
ggplot(df, aes(x=as.numeric(Nivel), y=as.numeric(Similitud), color=Índice))+
geom_point() +
stat_smooth(se = FALSE)
#theme(legend.position = 'none')
ggplot(df, aes(x=as.numeric(Nivel), y=as.numeric(Similitud), color=Índice))+
geom_point() +
stat_smooth(se = FALSE)+
facet_wrap(~Índice)
#theme(legend.position = 'none')
ggplot(df, aes(x=as.numeric(Nivel), y=as.numeric(Similitud))#, color=Índice))+
geom_point() +
ggplot(df, aes(x=as.numeric(Nivel), y=as.numeric(Similitud), color=Índice))+
geom_point() +
stat_smooth(se = FALSE)+
facet_wrap(~Índice)
#theme(legend.position = 'none')
ggplot(df, aes(x=as.numeric(Nivel), y=as.numeric(Similitud), color=Índice))+
geom_point() +
stat_smooth(se = FALSE)+
facet_wrap(~Índice+Nivel)
#theme(legend.position = 'none')
ggplot(df, aes(x=as.numeric(Nivel), y=as.numeric(Similitud), color=Índice))+
geom_point() +
stat_smooth(se = FALSE)+
facet_wrap(~Índice)
#theme(legend.position = 'none')
ggplot(df, aes(x=as.numeric(Nivel), y=as.numeric(Similitud), color=Índice))+
geom_point() +
stat_smooth(se = FALSE)+
facet_grid(Índice ~.)
#facet_wrap(~Índice)
#theme(legend.position = 'none')
ggplot(df, aes(x=as.numeric(Nivel), y=as.numeric(Similitud), color=Índice))+
geom_point() +
stat_smooth(se = FALSE)+
#facet_grid(Índice ~.)
facet_wrap(~Índice)
ggplot(df, aes(x=as.numeric(Nivel), y=as.numeric(Similitud), color=Índice))+
geom_point() +
stat_smooth(se = FALSE)+
facet_grid(Índice ~.)
#facet_wrap(~Índice)
#theme(legend.position = 'none')
library(roxygen2); # Read in the roxygen2 R package
roxygenise()
library(roxygen2); # Read in the roxygen2 R package
roxygenise()
rm(list = c("AmpSca", "TS.Satlnpepper"))
roxygenise()
roxygenise()
library(roxygen2); # Read in the roxygen2 R package
roxygenise()
library(roxygen2);
roxygenise()
library(devtools)
roxygenise()
library(devtools)
load_all(".")
devtools::document()
devtools::document()
rlang::last_error()
roxygenise()
roxygenise()
devtools::document()
?AmpSca
devtools::document()
devtools::document()
devtools::document()
?AmpSca
AmpShi()
help(EUC.DIST)
devtools::document()
devtools::document()
roxygen2::roxygenise()
?AmpSca
devtools::document()
devtools::document()
?TimeSca
?AmpSca
devtools::document()
devtools::document()
setwd("C:/Users/Usuario/Google Drive (juancbellassai@mi.unc.edu.ar)/Juanc Doctorado/2021/Scrips/My_own_R_packages")
library(devtools)
load_all(".")
install.packages("RMThreshold")
install.packages("SpatialPack")
setwd("C:/Users/Usuario/Google Drive (juancbellassai@mi.unc.edu.ar)/Juanc Doctorado/2021/Scrips/My_own_R_packages")
library(devtools)
load_all(".")
library(ggplot2)
library(SimilarityMeasures)
library(philentropy)
#Cargamos los datasets
setwd("C:/Users/Usuario/Google Drive (juancbellassai@mi.unc.edu.ar)/Juanc Doctorado/Base de datos/AR1-MA1-ARIMA_simulados")
fullAR1 = read.csv("AR1_TRAIN.csv")
fullMA1 = read.csv("Ma1_TRAIN.csv")
fullARIMA = read.csv("ARIMA_TRAIN.csv")
n = 8
df.list = list(AR=fullAR1[1:n,-1],
MA=fullMA1[1:n,-1],
ARIMA=fullARIMA[1:n,-1]); names(df.list)
n = 8
df.list = list(AR=fullAR1[1:n,-1],
MA=fullMA1[1:n,-1],
ARIMA=fullARIMA[1:n,-1]); names(df.list)
indices1.list = list(CHOU = CHOU)
indices1.list = list(CHOU = CHOU)
#Frechet.Dist <- function(x,y){return(Frechet(as.matrix(x),as.matrix(y)))}
CosineDist <- function(x,y){return(cosine_dist(as.numeric(x),as.numeric(y),testNA = FALSE))}
ChebyshevDist <- function(x,y){return(chebyshev(as.numeric(x),as.numeric(y),testNA = FALSE))}
EuclideanDist <- function(x,y){return(euclidean(as.numeric(x),as.numeric(y),testNA = FALSE))}
ManhattanDist <- function(x,y){return(manhattan(as.numeric(x),as.numeric(y),testNA = FALSE))}
distances.list = list(Frechet = Frechet,
Coseno = CosineDist,
Chebyshev = ChebyshevDist,
Euclidean = EuclideanDist,
Manhattan = ManhattanDist)
n.ind = length(indices1.list) # total de índices
n.dis = length(distances.list) # total de distancias
n.df = length(df.list) # total de datasets
df = data.frame(stringsAsFactors=FALSE)
for (i in 1:n.ind) {
#seleccionamos el índice
FUN = indices1.list[[i]]
for (j in 2:n.dis) {print(j)
#seleccionamos la distancia
DIS = distances.list[[j]]
for (k in 1:n.df) {
#seleccionamos el primer dataset
DS1 = df.list[[k]]
for (z in 1:n.df) {
if (z>=k){ #para no repetir pareos
#seleccionamos el segundo dataset
DS2 = df.list[[z]]
par = paste0(names(df.list)[k],"-",names(df.list)[z])
for (l in 1:dim(DS1)[1]){
#            for (ll in 1:dim(DS2)[1]) {
#              sim = FUN(DS1)
#            }
#calculamos la similitud
sim = apply(DS2[], 1, FUN, t(DS1[l,]), DIS)
dftoappend = cbind(sim,
names(indices1.list)[i],
names(distances.list)[j],
par)
colnames(dftoappend) = c("Similitud", "Indice", "Distancia", "Par")
df = rbind(df, dftoappend)
}
}
}
}
}
}
ggplot(df, aes(x=Par, y=as.numeric(Similitud), fill=Distancia))+
geom_boxplot() #+
#stat_smooth(se = FALSE)
#theme(legend.position = 'none')
distancia = names(distances.list)[2]
sub1 = subset(df, Distancia==(distancia))
sub1$Similitud = as.numeric(sub1$Similitud)
ggplot(sub1, aes(x=Par, y=as.numeric(Similitud), color=Distancia))+
geom_boxplot() +
#stat_smooth(se = FALSE)+
labs(title = distancia)# +
#facet_grid(Contaminación ~.)
DTW.Dist <- function(x,y){return(DTW(as.matrix(x),as.matrix(y)))}
EDIT.Dist <- function(x,y){return(EditDist(as.matrix(x),as.matrix(y)))}
LCSS.Dist <- function(x,y){return(LCSS(as.matrix(x),as.matrix(y)))}
Frechet.Dist <- function(x,y){return(Frechet(as.matrix(x),as.matrix(y)))}
CHOU.Dist <- function(x,y) {return(CHOU(x,y,EuclideanDist))}
indices2.list = list(DTW = DTW.Dist,
EditDistance = EDIT.Dist,
LCSS = LCSS.Dist,
CHOUakria = CHOU.Dist,
SSIMT = SSIMT)
setwd("C:/Users/Usuario/Google Drive (juancbellassai@mi.unc.edu.ar)/Juanc Doctorado/2021/Scrips/My_own_R_packages")
library(devtools)
load_all(".")
library(ggplot2)
setwd("C:/Users/Usuario/Google Drive (juancbellassai@mi.unc.edu.ar)/Juanc Doctorado/2021/Scrips/My_own_R_packages")
library(devtools)
load_all(".")
library(ggplot2)
setwd("C:/Users/Usuario/Google Drive (juancbellassai@mi.unc.edu.ar)/Juanc Doctorado/2021/Scrips/My_own_R_packages")
library(devtools)
load_all(".")
library(ggplot2)
#Cargamos los datasets
setwd("C:/Users/Usuario/Google Drive (juancbellassai@mi.unc.edu.ar)/Juanc Doctorado/Base de datos/AR1-MA1-ARIMA_simulados")
fullAR1 = read.csv("AR1_TRAIN.csv")
fullMA1 = read.csv("Ma1_TRAIN.csv")
fullARIMA = read.csv("ARIMA_TRAIN.csv")
#Cargamos los datasets
setwd("C:/Users/Usuario/Google Drive (juancbellassai@mi.unc.edu.ar)/Juanc Doctorado/Base de datos/AR1-MA1-ARIMA_simulados")
fullAR1 = read.csv("AR1_TRAIN.csv")
fullMA1 = read.csv("Ma1_TRAIN.csv")
fullARIMA = read.csv("ARIMA_TRAIN.csv")
nro.series = 10
df.list = list(AR=fullAR1[1:nro.series,-1],
MA=fullMA1[1:nro.series,-1],
ARIMA=fullARIMA[1:nro.series,-1]); names(df.list)
a = rnorm(50)
plot(a)
b = rnorm(50)
mahalanobis(a,b)
cov(a,b)
cov(a,a)
cov(b,b)
cov(a,b,cov(a,b))
cov(a,b)
S = cov(a,b)
mahalanobis(a,b,S)
cov(a,b,use = "everything")
class(cov(a,b))
cov(cbind(a,b))
cov(cbind(a,b), method = "pearson")
mahalanobis(a,b,cov(cbind(a,b)))
s = cov(cbind(a,b))
mahalanobis(a,b,S)
dima
dim(a)
View(a)
sqrt((a-b)TS-1(x-y))
sqrt(t(a-b)solve(cov(a,b))(a-b))
sqrt(t(a-b)%*%solve(cov(a,b))%*%(a-b))
sqrt(t(a-b)%*%solve(cov(cbind(a,b)))%*%(a-b))
mahalanobis(a,b)
mahalanobis(a,b,cov(cbind(a,b)))
mahalanobis(a,b,cov(rbind(a,b)))
mahalanobis(a,b,cov(cbind(a,b)))
var(a,b)
var(a,a)
cov(matrix(cbind(a,b)))
cov(cbind(a,b))
class(cov(cbind(a,b)))
mahalanobis(a,b,cov(a,b))
mahalanobis(a,b,cov(cbind(a,b)))
mahalanobis(a,b,cov(cbind(a,b)))
class(a)
mahalanobis(as.matrix(a),as.matrix(b),cov(cbind(a,b)))
mahalanobis(a,b,cov(cbind(a,b)))
a-b
a.b = a-b
t(a.b)
t(a.b)%*%a.b
t(a.b)%*%cov(cbind(a,b))
t(a.b)%*%solve(cov(cbind(a,b)))
solve(cov(cbind(a,b)))
t(a.b)%*%solve(cov(cbind(a,b)))%*%a.b
m = cbind(a,b)
class(m)
mahalanobis(m,cov=cov(m))
mahalanobis(m,colMeans(m), cov(m))
View(mahalanobis(m,colMeans(m), cov(m)))
mahalanobis(a,b)
colMeans(m)
getwd()
library(roxygen2); # Read in the roxygen2 R package
roxygenise();
rm(list = c("AmpSca"))
library(roxygen2)
roxygenise()
library(roxygen2)
roxygenise()
TS.SaltPepper <- function(S, epsi) {
if (epsi<0 | epsi>1) {stop('epsi must be in the interval [0,1]')}
n = length(S)
salt = max(S)
pepper = min(S)
random =sort(sample(1:n, (epsi*n),replace = F))
len.rand = length(random)
S1 = S
for (i in 1:len.rand) {
ifelse(i<=(len.rand), S1[i] <- salt, S1[i] <- pepper)
}
return(S1)
}
y = rnorm(100)
plot(y)
plot(y, type = "l")
y = rnorm(1000)
plot(y, type = "l")
y2 = TS.SaltPepper(y, .2)
plot(y-y2, type = "l")
rbinom(10,1,.2)
rbinom(10,1,.2)
rbinom(10,1,.2)
rbinom(10,1,.2)
rbinom(10,1,.2)
rbinom(10,1,.2)
rbinom(10,1,.2)
rbinom(10,1,.5)
rbinom(10,2,.5)
rbinom(10,2,.5)
rbinom(10,2,.5)
rbinom(10,1,.5)
rbinom(10,3,.5)
rbinom(10,2,.5)
rbinom(10,2,.5)
rbinom(10,2,.1)
rbinom(10,2,.2)
rbinom(10,2,.3)
rbinom(10,2,.4)
rbinom(10,2,.5)
rbinom(10,1,.1)
rbinom(10,1,.1)
rbinom(10,1,.4)
sal = rbinom(10,1,.4)
sal
pimienta = rbinom(10,1,.4)
pimienta
sal = rbinom(10,1,.4); sal
pimienta = rbinom(10,1,.4); pimienta
rbinom(1, 1, prob)
rbinom(1, 1, .3)
rbinom(1, 1, .3)
rbinom(1, 1, .3)
rbinom(1, 1, .3)
rbinom(1, 1, .3)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
rbinom(1, 1, .5)
# SaltPepper function 2
TS.SaltPepper2 <- function(Y, prop) {
if (epsi<0 | epsi>1) {stop('epsi must be in the interval [0,1]')}
n = length(Y)
salt = max(Y)
pepper = min(Y)
ts.bin = rbinom(n, 1, prob)
Y2 = (abs(ts.bin-1)*Y) # unaltered data from the original time-series
for (i in 1:n) {
if (ts.bin[i] == 1) {ifelse(rbinom(1,1,.5) == 0,
ts.bin[i] <- salt, ts.bi[i] <- pepper)}}
return(Y2 + ts.bin)
}
# SaltPepper function 2
TS.SaltPepper2 <- function(Y, prop) {
if (epsi<0 | epsi>1) {stop('epsi must be in the interval [0,1]')}
n = length(Y)
salt = max(Y)
pepper = min(Y)
ts.bin = rbinom(n, 1, prob)
Y2 = (abs(ts.bin-1)*Y) # unaltered data from the original time-series
for (i in 1:n) {
if (ts.bin[i] == 1) {ifelse(rbinom(1,1,.5) == 0,
ts.bin[i] <- salt, ts.bi[i] <- pepper)}}
return(Y2 + ts.bin)
}
# Plot saltpepper 2
y3 = TS.SaltPepper2(y, .2)
# SaltPepper function 2
TS.SaltPepper2 <- function(Y, prop) {
if (prop<0 | prop>1) {stop('epsi must be in the interval [0,1]')}
n = length(Y)
salt = max(Y)
pepper = min(Y)
ts.bin = rbinom(n, 1, prob)
Y2 = (abs(ts.bin-1)*Y) # unaltered data from the original time-series
for (i in 1:n) {
if (ts.bin[i] == 1) {ifelse(rbinom(1,1,.5) == 0,
ts.bin[i] <- salt, ts.bi[i] <- pepper)}}
return(Y2 + ts.bin)
}
# Plot saltpepper 2
y3 = TS.SaltPepper2(y, .2)
# SaltPepper function 2
TS.SaltPepper2 <- function(Y, prop) {
if (prop<0 | prop>1) {stop('epsi must be in the interval [0,1]')}
n = length(Y)
salt = max(Y)
pepper = min(Y)
ts.bin = rbinom(n, 1, prop)
Y2 = (abs(ts.bin-1)*Y) # unaltered data from the original time-series
for (i in 1:n) {
if (ts.bin[i] == 1) {ifelse(rbinom(1,1,.5) == 0,
ts.bin[i] <- salt, ts.bi[i] <- pepper)}}
return(Y2 + ts.bin)
}
# Plot saltpepper 2
y3 = TS.SaltPepper2(y, .2)
# SaltPepper function 2
TS.SaltPepper2 <- function(Y, prop) {
if (prop<0 | prop>1) {stop('epsi must be in the interval [0,1]')}
n = length(Y)
salt = max(Y)
pepper = min(Y)
ts.bin = rbinom(n, 1, prop)
Y2 = (abs(ts.bin-1)*Y) # unaltered data from the original time-series
for (i in 1:n) {
if (ts.bin[i] == 1) {ifelse(rbinom(1,1,.5) == 0,
ts.bin[i] <- salt, ts.bin[i] <- pepper)}}
return(Y2 + ts.bin)
}
# Plot saltpepper 2
y3 = TS.SaltPepper2(y, .2)
plot(y-y3, type = "l")
library(roxygen2)
roxygenise()
roxygenise()
roxygenise()
ReplARCont <- function(y, prob, phi1) {
N = length(y)
ts.bin = rbinom(N, 1, prob)
ar1.sim = arima.sim(model = list(ar = phi1), n = N)
return((abs(ts.bin-1)*y) + (ts.bin*ar1.sim))
}
rnorm(10)
y1 = ReplARCont(y, .2, .3)
y = rnorm(10)
y1 = ReplARCont(y, .2, .3)
plot(y-y1, type="l")
y1 = ReplARCont(y, .5, .3)
plot(y-y1, type="l")
y1 = ReplARCont(y, .1, .3)
plot(y-y1, type="l")
library(roxygen2)
roxygenise()
